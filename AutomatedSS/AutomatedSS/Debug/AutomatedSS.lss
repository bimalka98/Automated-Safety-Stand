
AutomatedSS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be0  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000773  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000539  00000000  00000000  0000177f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000459  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000258f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{
   
	initialize();
  a6:	0e 94 68 00 	call	0xd0	; 0xd0 <initialize>
	

    while (1) 
    {
        // read the PIND0 and store its value to the variable KeyONDetected
        KeyONDetected = (PIND & (1 << PIND0)); // if key is on, this variable will be made true 
  aa:	89 b1       	in	r24, 0x09	; 9
  ac:	81 70       	andi	r24, 0x01	; 1
  ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <KeyONDetected>
		  
		if (KeyONDetected & CurrentAngleOfBikeZero)
  b2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b6:	88 23       	and	r24, r24
  b8:	31 f0       	breq	.+12     	; 0xc6 <main+0x20>
  ba:	66 23       	and	r22, r22
  bc:	21 f0       	breq	.+8      	; 0xc6 <main+0x20>
			stepperUp(KeyONDetected,CurrentAngleOfBikeZero);
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 76 00 	call	0xec	; 0xec <stepperUp>
		
		  
        // get the angle of the bike from the gyroscope
        //CurrentAngleOfBike = getCurrentAngleOfBike();

        if ((PIND&0x08) == 0) //check whether lift down switch is ground
  c6:	4b 99       	sbic	0x09, 3	; 9
  c8:	f0 cf       	rjmp	.-32     	; 0xaa <main+0x4>
			stepperDown();
  ca:	0e 94 fd 00 	call	0x1fa	; 0x1fa <stepperDown>
  ce:	ed cf       	rjmp	.-38     	; 0xaa <main+0x4>

000000d0 <initialize>:


unsigned int count = 0;

int initialize(){
	DDRD |= (1<<OUTPUT_RED_LED)|(1<<OUTPUT_GREEN_LED); // PD5 and PD6 as outputs				
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	80 66       	ori	r24, 0x60	; 96
  d4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<KEY_SWITCH)|~(1<<IR_INPUT)|~(1<<LIFT_DOWN_PIN);  // PD0 PD2 PD4 as inputs  				
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<STEP_A)|(1<<STEP_B)|(1<<STEP_C)|(1<<STEP_D);	//steppers as an output port
  da:	87 b1       	in	r24, 0x07	; 7
  dc:	8f 60       	ori	r24, 0x0F	; 15
  de:	87 b9       	out	0x07, r24	; 7
	
	PORTD |= (1<<LIFT_DOWN_PIN);  //activate pull up
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	8b b9       	out	0x0b, r24	; 11
	
	return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <stepperUp>:

int stepperUp(bool IRDetect){
	
	int delay = 500;
	while(!IRDetect){
  ec:	7d c0       	rjmp	.+250    	; 0x1e8 <stepperUp+0xfc>
		
		count += 1;
  ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <count>
  f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <count+0x1>
  f6:	2f 5f       	subi	r18, 0xFF	; 255
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <count+0x1>
  fe:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <count>
		PORTD |= (1<<OUTPUT_RED_LED); //switch on the RED LED
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	90 62       	ori	r25, 0x20	; 32
 106:	9b b9       	out	0x0b, r25	; 11
		
		PORTC |= (1<<STEP_A)|(1<<STEP_D); //1001
 108:	98 b1       	in	r25, 0x08	; 8
 10a:	99 60       	ori	r25, 0x09	; 9
 10c:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<STEP_B)|~(1<<STEP_C);
 10e:	98 b1       	in	r25, 0x08	; 8
 110:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f e9       	ldi	r18, 0x9F	; 159
 114:	36 e8       	ldi	r19, 0x86	; 134
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <stepperUp+0x2c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <stepperUp+0x36>
 122:	00 00       	nop
		_delay_ms(delay);
		
		PORTC |= (1<<STEP_A);	//1000
 124:	98 b1       	in	r25, 0x08	; 8
 126:	98 60       	ori	r25, 0x08	; 8
 128:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<STEP_B)|~(1<<STEP_C)|~(1<<STEP_D);
 12a:	98 b1       	in	r25, 0x08	; 8
 12c:	98 b9       	out	0x08, r25	; 8
 12e:	2f e9       	ldi	r18, 0x9F	; 159
 130:	36 e8       	ldi	r19, 0x86	; 134
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <stepperUp+0x48>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <stepperUp+0x52>
 13e:	00 00       	nop
		_delay_ms(delay);
		
		PORTC |= (1<<STEP_A)|(1<<STEP_B); //1100
 140:	98 b1       	in	r25, 0x08	; 8
 142:	9c 60       	ori	r25, 0x0C	; 12
 144:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<STEP_C)|~(1<<STEP_D);
 146:	98 b1       	in	r25, 0x08	; 8
 148:	98 b9       	out	0x08, r25	; 8
 14a:	2f e9       	ldi	r18, 0x9F	; 159
 14c:	36 e8       	ldi	r19, 0x86	; 134
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	21 50       	subi	r18, 0x01	; 1
 152:	30 40       	sbci	r19, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <stepperUp+0x64>
 158:	00 c0       	rjmp	.+0      	; 0x15a <stepperUp+0x6e>
 15a:	00 00       	nop
		_delay_ms(delay);
		
		PORTC |= (1<<STEP_B);	//0100
 15c:	98 b1       	in	r25, 0x08	; 8
 15e:	94 60       	ori	r25, 0x04	; 4
 160:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<STEP_A)|~(1<<STEP_C)|~(1<<STEP_D);
 162:	98 b1       	in	r25, 0x08	; 8
 164:	98 b9       	out	0x08, r25	; 8
 166:	2f e9       	ldi	r18, 0x9F	; 159
 168:	36 e8       	ldi	r19, 0x86	; 134
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	30 40       	sbci	r19, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <stepperUp+0x80>
 174:	00 c0       	rjmp	.+0      	; 0x176 <stepperUp+0x8a>
 176:	00 00       	nop
		_delay_ms(delay);
		
		PORTC |= (1<<STEP_B)|(1<<STEP_C); //0110
 178:	98 b1       	in	r25, 0x08	; 8
 17a:	96 60       	ori	r25, 0x06	; 6
 17c:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<STEP_A)|~(1<<STEP_D);
 17e:	98 b1       	in	r25, 0x08	; 8
 180:	98 b9       	out	0x08, r25	; 8
 182:	2f e9       	ldi	r18, 0x9F	; 159
 184:	36 e8       	ldi	r19, 0x86	; 134
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	30 40       	sbci	r19, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <stepperUp+0x9c>
 190:	00 c0       	rjmp	.+0      	; 0x192 <stepperUp+0xa6>
 192:	00 00       	nop
		_delay_ms(delay);
		
		PORTC |= (1<<STEP_C);	//0010
 194:	98 b1       	in	r25, 0x08	; 8
 196:	92 60       	ori	r25, 0x02	; 2
 198:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<STEP_A)|~(1<<STEP_B)|~(1<<STEP_D);
 19a:	98 b1       	in	r25, 0x08	; 8
 19c:	98 b9       	out	0x08, r25	; 8
 19e:	2f e9       	ldi	r18, 0x9F	; 159
 1a0:	36 e8       	ldi	r19, 0x86	; 134
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	30 40       	sbci	r19, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <stepperUp+0xb8>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <stepperUp+0xc2>
 1ae:	00 00       	nop
		_delay_ms(delay);
		
		PORTC |= (1<<STEP_C)|(1<<STEP_D); //0011
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	93 60       	ori	r25, 0x03	; 3
 1b4:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<STEP_A)|~(1<<STEP_B);
 1b6:	98 b1       	in	r25, 0x08	; 8
 1b8:	98 b9       	out	0x08, r25	; 8
 1ba:	2f e9       	ldi	r18, 0x9F	; 159
 1bc:	36 e8       	ldi	r19, 0x86	; 134
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	30 40       	sbci	r19, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <stepperUp+0xd4>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <stepperUp+0xde>
 1ca:	00 00       	nop
		_delay_ms(delay);
		
		PORTC |= (1<<STEP_D);	//0001
 1cc:	98 b1       	in	r25, 0x08	; 8
 1ce:	91 60       	ori	r25, 0x01	; 1
 1d0:	98 b9       	out	0x08, r25	; 8
		PORTC &= ~(1<<STEP_A)|~(1<<STEP_B)|~(1<<STEP_C);
 1d2:	98 b1       	in	r25, 0x08	; 8
 1d4:	98 b9       	out	0x08, r25	; 8
 1d6:	2f e9       	ldi	r18, 0x9F	; 159
 1d8:	36 e8       	ldi	r19, 0x86	; 134
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <stepperUp+0xf0>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <stepperUp+0xfa>
 1e6:	00 00       	nop
}

int stepperUp(bool IRDetect){
	
	int delay = 500;
	while(!IRDetect){
 1e8:	88 23       	and	r24, r24
 1ea:	09 f4       	brne	.+2      	; 0x1ee <stepperUp+0x102>
 1ec:	80 cf       	rjmp	.-256    	; 0xee <stepperUp+0x2>
		PORTC |= (1<<STEP_D);	//0001
		PORTC &= ~(1<<STEP_A)|~(1<<STEP_B)|~(1<<STEP_C);
		_delay_ms(delay);
	}
	
	PORTD &= ~(1<<OUTPUT_RED_LED);		//switch off the RED LED
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8f 7d       	andi	r24, 0xDF	; 223
 1f2:	8b b9       	out	0x0b, r24	; 11
	return 0;
}
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	08 95       	ret

000001fa <stepperDown>:
int stepperDown(){
	

		int delay = 500;
		while (count>=0){
			count -= 1;
 1fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 1fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 208:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
			PORTD |= (1<<OUTPUT_RED_LED); //switch on the RED LED
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	80 62       	ori	r24, 0x20	; 32
 210:	8b b9       	out	0x0b, r24	; 11
			
			PORTC |= (1<<STEP_D);	//0001
 212:	88 b1       	in	r24, 0x08	; 8
 214:	81 60       	ori	r24, 0x01	; 1
 216:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<STEP_A)|~(1<<STEP_B)|~(1<<STEP_C);
 218:	88 b1       	in	r24, 0x08	; 8
 21a:	88 b9       	out	0x08, r24	; 8
 21c:	2f e9       	ldi	r18, 0x9F	; 159
 21e:	86 e8       	ldi	r24, 0x86	; 134
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <stepperDown+0x28>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <stepperDown+0x32>
 22c:	00 00       	nop
			_delay_ms(delay);
			
			PORTC |= (1<<STEP_C)|(1<<STEP_D); //0011
 22e:	88 b1       	in	r24, 0x08	; 8
 230:	83 60       	ori	r24, 0x03	; 3
 232:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<STEP_A)|~(1<<STEP_B);
 234:	88 b1       	in	r24, 0x08	; 8
 236:	88 b9       	out	0x08, r24	; 8
 238:	2f e9       	ldi	r18, 0x9F	; 159
 23a:	86 e8       	ldi	r24, 0x86	; 134
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <stepperDown+0x44>
 246:	00 c0       	rjmp	.+0      	; 0x248 <stepperDown+0x4e>
 248:	00 00       	nop
			_delay_ms(delay);
			
			PORTC |= (1<<STEP_C);	//0010
 24a:	88 b1       	in	r24, 0x08	; 8
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<STEP_A)|~(1<<STEP_B)|~(1<<STEP_D);
 250:	88 b1       	in	r24, 0x08	; 8
 252:	88 b9       	out	0x08, r24	; 8
 254:	2f e9       	ldi	r18, 0x9F	; 159
 256:	86 e8       	ldi	r24, 0x86	; 134
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <stepperDown+0x60>
 262:	00 c0       	rjmp	.+0      	; 0x264 <stepperDown+0x6a>
 264:	00 00       	nop
			_delay_ms(delay);
			
			PORTC |= (1<<STEP_B)|(1<<STEP_C); //0110
 266:	88 b1       	in	r24, 0x08	; 8
 268:	86 60       	ori	r24, 0x06	; 6
 26a:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<STEP_A)|~(1<<STEP_D);
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	88 b9       	out	0x08, r24	; 8
 270:	2f e9       	ldi	r18, 0x9F	; 159
 272:	86 e8       	ldi	r24, 0x86	; 134
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <stepperDown+0x7c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <stepperDown+0x86>
 280:	00 00       	nop
			_delay_ms(delay);
			
			PORTC |= (1<<STEP_B);	//0100
 282:	88 b1       	in	r24, 0x08	; 8
 284:	84 60       	ori	r24, 0x04	; 4
 286:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<STEP_A)|~(1<<STEP_C)|~(1<<STEP_D);
 288:	88 b1       	in	r24, 0x08	; 8
 28a:	88 b9       	out	0x08, r24	; 8
 28c:	2f e9       	ldi	r18, 0x9F	; 159
 28e:	86 e8       	ldi	r24, 0x86	; 134
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <stepperDown+0x98>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <stepperDown+0xa2>
 29c:	00 00       	nop
			_delay_ms(delay);
			
			PORTC |= (1<<STEP_A)|(1<<STEP_B); //1100
 29e:	88 b1       	in	r24, 0x08	; 8
 2a0:	8c 60       	ori	r24, 0x0C	; 12
 2a2:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<STEP_C)|~(1<<STEP_D);
 2a4:	88 b1       	in	r24, 0x08	; 8
 2a6:	88 b9       	out	0x08, r24	; 8
 2a8:	2f e9       	ldi	r18, 0x9F	; 159
 2aa:	86 e8       	ldi	r24, 0x86	; 134
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <stepperDown+0xb4>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <stepperDown+0xbe>
 2b8:	00 00       	nop
			_delay_ms(delay);
			
			PORTC |= (1<<STEP_A);	//1000
 2ba:	88 b1       	in	r24, 0x08	; 8
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<STEP_B)|~(1<<STEP_C)|~(1<<STEP_D);
 2c0:	88 b1       	in	r24, 0x08	; 8
 2c2:	88 b9       	out	0x08, r24	; 8
 2c4:	2f e9       	ldi	r18, 0x9F	; 159
 2c6:	86 e8       	ldi	r24, 0x86	; 134
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <stepperDown+0xd0>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <stepperDown+0xda>
 2d4:	00 00       	nop
			_delay_ms(delay);
			
			PORTC |= (1<<STEP_A)|(1<<STEP_D); //1001
 2d6:	88 b1       	in	r24, 0x08	; 8
 2d8:	89 60       	ori	r24, 0x09	; 9
 2da:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1<<STEP_B)|~(1<<STEP_C);
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	88 b9       	out	0x08, r24	; 8
 2e0:	2f e9       	ldi	r18, 0x9F	; 159
 2e2:	86 e8       	ldi	r24, 0x86	; 134
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <stepperDown+0xec>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <stepperDown+0xf6>
 2f0:	00 00       	nop
 2f2:	83 cf       	rjmp	.-250    	; 0x1fa <stepperDown>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
